Https协议 = Http协议 + SSL/TLS协议,在HTTPS数据传输过程中,需要使用SSL/TLS对数据进行加密和解密.

SSL全称是Secure Sockets Layer,即安全套接层协议,是为网络通信提供安全及数据完整性的一种安全协议.
TLS全称是Transport Layer Security,即安全传输层协议.它是建立在SSL 3.0协议规范之上,是SSL 3.0的后续版本.在TLS和SSL3.0之间存在着显著的差别,
主要是它们支持的加密算法不同,所以TLS与SSL3.0不能互操作.虽然TLS与SSL3.0在加密算法上不同,但理解HTTPS的过程中,可以将SSL和TLS看成同一协议.

Https为了兼顾安全和效率,同时使用了对称加密和非对称加密.
其中,数据是对称加密的,对称加密所使用的密钥是通过非对称加密传输的.


Https请求细分:
1)客户端向服务器发起HTTPS请求,连接服务器的443端口.    【客户端 -> 服务器,链接】
2)服务器有一个密钥对,即公钥和私钥,是用来进行非对称加密使用的,服务器端保存着私钥,不能将其泄露,公钥可以发给任何人.	【服务端诠释,获取服务器公钥】
3)服务器将自己的公钥发给客户端.				【服务器->客户端,服务器公钥】
4)客户端收到公钥后,检查公钥的合法性,即验证服务器发送的数字证书的合法性.不合格,则终端HTTPS传输.
若公钥合格,客户端会生成一个随机值,该随机值就是用于对称加密的密钥.	【客户端诠释,生成客户端密钥】
5)发起第二次HTTPS请求,将加密之后的客户端密钥,发送给服务器.		【客户端 -> 服务器,客户端密钥】
6)服务器接收到客户端发来的密文后,会用私钥对其非对称解密,解密之后的明文就是客户端密钥,用客户端密钥对数据进行对称加密,这样数据就变成了密文. 【服务端诠释,非对称解密获取对称加密的密钥】
7)服务器将加密后的密文发送给客户端.		【服务器 -> 客户端,数据】
8)客户端收到服务器发送来的密文,用客户端密钥对其进行对称解密,获取到数据.		【客户端诠释,解密数据】

从数据加密的角度分析上面8个步骤
涉及到的密钥:
请求开始前:服务器端具有公钥和私钥,用于非对称加密.分别用S1,S2表示
请求时:客户端会生成一个随机密钥,用于对称加密.用CC表示
公式: result = CC + S1; result + S2 = CC;
2)服务端:S1、S2; 客户端:无
4)服务端:S1、S2; 客户端:S1、CC
5)客户端发送(result = S1 + CC)
6)服务端利用result + S2 = CC, 因此,服务端:S1、S2、CC; 客户端:S1、CC
7、8)传输,随机密钥CC加密后的数据

因此,
1-5:为了使用非对称加密,是服务端获取到客户端产生的随机密钥.
6-8:使用对称加密,传输数据.


数字证书:
在Https请求中,第4步,客户端如何验证服务器端公钥的合法性,是至关重要的.这一步使用到了数字证书.接下来说明数字证书.
数字证书由证书认证中心(Certificate Authority)颁发,简称CA.全球知名的CA也就100多个,比如VeriSign、GlobalSign等,国内知名的CA有WoSign.

通过浏览器获取数字证书:
【后期获取】


数字证书链:
例如:VeriSign是全球知名的CA,但一般情况下,CA会签发一种证书,再用这种证书去签发百度等的数字证书.
证书链为:VeriSign -> Symatec -> baidu.com
理论上而言,信任其中任意一个节点,都相当于信任了整个证书链.但由于根信任证书变动最少,因此建议直接信任根证书.



















