定义:
确保某一个类只有一个实例,而且自行自行实例化并向整个系统提供这个实例.

使用场景:
确保某个类有且只有一个对象的场景,避免产生多个对象消耗过多的资源.
或者某种类型的对象只应该有且只有一个.
例如:要访问IO、数据库等资源.

优点:
1,减少内存开支【对象需要频繁创建和销毁场景】
2,减少性能开支【当一个对象产生需要较多资源时,如读取配置、产生其他依赖对象时,可以通过应用启动时,产生单例对象,通过永驻内存的方式解决】
3,避免对资源的多重占用【对同一资源文件的同时写操作】
4,设置全局访问点【优化和共享资源访问,例如可以设计一个单例,负责所有数据表的映射处理】

缺点:
1,扩展艰难【一般没有接口,只有通过修改代码来扩展】
2,容易引发内存泄露【单例模式如果*持有*Context对象,很容易引发内存泄露,因此通常传递Application】



工程介绍:

package com.dm.singleton.activity;		入口Activity

其他:									每个包名对应单例模式一个方法






