定义:
使用共享对象可有效的支持大量的细粒度的对象

使用场景:
1,系统中存在大量的相似对象.
2,细粒度的对象都具备较接近的外部状态,而且内部状态与环境无关,也就是说对象没有特定身份.
3,需要缓冲池的场景.

外部状态:不可共享的状态
内部状态:可以共享的状态

Android源码:
1,主UI线程和子线程,  【UI不可以在不是它创建线程里进行更新 --> UI不能够在子线程中更新】
2,Android的消息机制,Message、MessageQueue、Looper、Handler

优点:
1,大幅度的降低内存中的对象的数量
 缺点:
1,提高了系统的复杂性,要求分离出内部状态和外部状态,而且外部状态具有固化特性,不应该随内部状态改变而改变,否则导致系统的逻辑混乱
2,使得系统更加复杂。为了使对象可以共享,需要将一些状态外部化,使得程序的逻辑复杂化
3,将享元对象的状态外部化,而读取外部状态使得运行时间稍微变长




