定义:
为其它对象提供一种代理,来控制对这个对象的访问<代理对象最好是接口,就可以做到完全的解耦>

使用场景:
1,当无法或不想直接访问某个对象或访问某个对象存在困难时
2,委托对象与代理对象需要实现相同的接口

动态代理: 通过一个代理类来替代 多个被替代类,实质是对代理者与被代理者进行解耦,使两者之间没有直接的耦合
静态代理: 只是为给定接口下的实现类做代理

它们两个依据code方面分为两种模式:
 * 远程代理: 为某个对象在不同的内存地址空间提供局部管理。使系统可以将Server部分的部分隐藏，以便Client可以不必考虑Server的存在
 * 虚拟代理: 使用一个代理对象表示一个十分耗资源的对象并在真正需要时才创建
 * 保护代理: 使用代理控制对原始对象的访问,该类型的代理常被用于原始对象有不同访问权限的情况
 * 智能引用: 在访问原始对象时执行一些自己的附加操作,并对指向原始对象的引用计数

优点:
几乎所有的结构型模式中,都可以看到代理模式的影子
缺点:
类的增加

Android源码:
1,ActivityManagerProxy 代理  ActivityManagerNative的子类ActivityManagerService; 这是委托代理
2,Binder与AIDL



