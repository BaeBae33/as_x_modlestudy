定义:
将对象组合成树形结构以表示"部分-整体"的层次结构,使得用户对单个对象和组合对象的使用具有一致性.

使用场景:
1,表示对象的部分-整体层次结构时
2,从一个整体中能够独立出部分模块或工程的场景

安全的组合模式:
 * 每个模块各司其职,仅在部分上同步根节点
 * 缺点:违背了依赖倒置原则,这样的写法,依赖抽象的必要就不高了
透明的组合模式:
 * 对于添加删除操作,直接同步到了根节点,使用时,不必暴露干叶具体信息

Android源码:
1,自己实现File和dir的关系
2,View 和 ViewGroup的关联

优点:
1,可以清楚定义分层次的复杂对象,表示对象的全部或部分层次,它让高层模块忽略了层次的差异,方便对整个层次结构进行控制
2,高层模块可以一致的使用一个组合结构或者其中某个对象,不必关心处理的是单个对象还是整个组合结构,简化了高层模块的代码
3,增加新的枝干构件和叶子构件都很方便,无须对现有类库进行任何修改,符合"开闭原则"
4,为树形结构的面向对象实现提供了一种灵活的解决方案,方便于用户控制复杂的树形结构
缺点:
1,在新增构件中不好对枝干的构建类型进行限制,以及不能依赖类型系统来施加约束






