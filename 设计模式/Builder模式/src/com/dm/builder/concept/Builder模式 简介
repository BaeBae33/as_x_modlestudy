介绍:
Builder模式是一步步创建一个复杂对象的创建型模式,它允许用户在不知道内部构造细节的情况下,可以更精细的控制对象的构造流程.
它将构建复杂对象的过程和它的部件解耦,使得构建过程和部件的表示隔离开来.

定义:
将一个复杂对象的构建和它的表示分离开来,使得同样的构建过程可以创建不同的表示.

使用场景:
1,相同方法,不同执行顺序,产生不同事件结果
2,多个部件或零件,都可以装配到一个对象中,产生不同的结果
3,产品类复杂
4,初始化对象复杂,且较多参数具有默认值

优点:
1,良好的封装性,使得初步创建的时候,隔绝产品内部组成细节
2,建造者独立,容易扩展

缺点:
1,产生多的Builder对象以及Director对象,消耗内存

工程介绍:
package com.dm.builder.activity;		入口Activity

package com.dm.builder.director;		负责集成builder功能

package com.dm.builder.builder;			负责构建Computer,并返回Computer

package com.dm.builder.product;			具体产品

以上是最完善的Builder模式
以下是通常的变形:【最终目的:让用户第一调用product,将尽可能少的一层接口暴露给用户】

变形1:【Dialog实现】
1)builder和Director角色合并		
2)Builder成为product的静态内部类
目的:让用户通过product.Builder就完成功能
暴露:product.Builder

变形2:
1)builder和Director角色合并
2)Builder成为product的get方法
目的:让用户通过product.getBuilder()就完成配置,再通过product其他配置完成功能.
暴露:product + Builder

变形3:【ImageLoader】
1)builder和Director角色合并
2)Builder成为product的静态内部类,调用设置
2)director,在product中的init(director)参数中
目的:让用户先通过product.Builder就完成配置,在init()调用director完成功能

变形3衍生:
1)builder方法权限全部基本都成为protected,对外不暴露
2)director(config)封装builder内部实现,暴露给product
3)director,在product中的init(director)参数中
目的:让用户通过product.init(director),即可完成对director+builder的配置










