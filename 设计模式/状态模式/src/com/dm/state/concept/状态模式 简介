定义:
当一个对象的内在状态改变时,允许改变其行为,这个对象看起来像是改变了其类

使用场景:
1,一个对象的行为取决于它的状态,并且它必须在运行时根据状态改变它的状态
2,代码中包含大量的与对象状态有关的条件语句;例如,一个操作中含有庞大的多分支语句,且这些分支依赖于该对象的状态

Android源码应用:
1,wifi状态

优点:
1,提供一个更好的方法来组织和特定状态相关的代码
2,将繁琐的状态判断转换成结构清晰的状态类族,在避免代码膨胀的同时,也保证了可扩展性和可维护性
缺点:
增加系统类和对象的个数



状态模式和策略模式对比:
1,UML结构完全一样
2,使用基本一样,因为"状态"之间是可以相互替换的.
不同点在于,"状态模式"多封装了"状态";而"策略模式"在于让用户自己选择"算法"
