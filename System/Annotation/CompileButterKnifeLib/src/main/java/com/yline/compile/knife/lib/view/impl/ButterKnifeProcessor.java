package com.yline.compile.knife.lib.view.impl;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.JavaFile;
import com.yline.compile.knife.lib.view.annotation.BindView;
import com.yline.compile.knife.lib.view.annotation.OnClick;

import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;

@AutoService(Processor.class)
public class ButterKnifeProcessor extends AbstractProcessor {
    private Filer mFiler;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);

        logV("init start");
        mFiler = processingEnv.getFiler();
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> annotationTypeSet = new LinkedHashSet<>();
        annotationTypeSet.add(BindView.class.getCanonicalName());
        annotationTypeSet.add(OnClick.class.getCanonicalName());
        return annotationTypeSet;
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        logV("process start");

        Map<TypeElement, BindingSet> bindingMap = findAndParseTargets(roundEnv);

        for (Map.Entry<TypeElement, BindingSet> entry : bindingMap.entrySet()) {
            TypeElement typeElement = entry.getKey();
            BindingSet bindingSet = entry.getValue();

            // 写入文件
            JavaFile javaFile = bindingSet.brewJava(1, true);
            try {
                javaFile.writeTo(mFiler);
            } catch (IOException e) {
                logE("process writeTo", e);
            }
        }

        logV("process end");
        return false;
    }

    /**
     * 以下都是伪 实现
     * <p>
     * 1，收集 注解信息
     * 2，生成 java文件【生成失败，这里就不再调试了】
     */
    private Map<TypeElement, BindingSet> findAndParseTargets(RoundEnvironment env) {
        Map<TypeElement, BindingSet.Builder> builderMap = new LinkedHashMap<>();

        // Process each @BindView element.
        for (Element element : env.getElementsAnnotatedWith(BindView.class)) {
            // we don't SuperficialValidation.validateElement(element)
            // so that an unresolved View type can be generated by later processing rounds
            try {
                parseBindView(element, builderMap);
            } catch (Exception e) {
                logE("findAndParseTargets", e);
            }
        }

        Deque<Map.Entry<TypeElement, BindingSet.Builder>> entries =
                new ArrayDeque<>(builderMap.entrySet());
        Map<TypeElement, BindingSet> bindingMap = new LinkedHashMap<>();
        while (!entries.isEmpty()) {
            Map.Entry<TypeElement, BindingSet.Builder> entry = entries.removeFirst();

            TypeElement type = entry.getKey();
            BindingSet.Builder builder = entry.getValue();

            bindingMap.put(type, builder.build()); // todo 这里有一层校验
        }

        return bindingMap;
    }

    private void parseBindView(Element element, Map<TypeElement, BindingSet.Builder> builderMap) {
        logV("parseBindView start");
        // todo 这里将 element解析，放到 buidler中
    }

    private void logV(String content) {
        // System.out.println("xxx-" + content); 意思差不多
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, "xxx-" + content);
    }

    private void logE(String content, Exception ex) {
        processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "xxx-" + content + ", ex = " + ex.toString());
    }
}




































